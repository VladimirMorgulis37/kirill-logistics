version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
  notification-db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: notification_password
      POSTGRES_DB: notification_db
    ports:
      - "5437:5432"
    volumes:
      - notification_db_data:/var/lib/postgresql/data
      - ./notification-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification_user -d notification_db"]
      interval: 5s
      timeout: 5s
      retries: 5
  # База данных для Auth Service
  auth-db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
      POSTGRES_DB: auth_db
    ports:
      - "5433:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./auth-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # База данных для Order Service
  order-db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
      POSTGRES_DB: order_db
    ports:
      - "5434:5432"
    volumes:
      - order_db_data:/var/lib/postgresql/data
      - ./order-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order_user -d order_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # База данных для Tracking Service
  tracking-db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: tracking_user
      POSTGRES_PASSWORD: tracking_password
      POSTGRES_DB: tracking_db
    ports:
      - "5435:5432"
    volumes:
      - tracking_db_data:/var/lib/postgresql/data
      - ./tracking-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracking_user -d tracking_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # База данных для Analytics Service
  analytics-db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: analytics_user
      POSTGRES_PASSWORD: analytics_password
      POSTGRES_DB: analytics_db
    ports:
      - "5436:5432"
    volumes:
      - analytics_db_data:/var/lib/postgresql/data
      - ./analytics-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics_user -d analytics_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  delivery-db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: delivery_user
      POSTGRES_PASSWORD: delivery_password
      POSTGRES_DB: delivery_db
    ports:
      - "5438:5432"
    volumes:
      - delivery_db_data:/var/lib/postgresql/data
      - ./delivery-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U delivery_user -d delivery_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./auth-service
    ports:
      - "8081:8080"
    depends_on:
      - auth-db
    environment:
      - DB_HOST=auth-db
      - DB_USER=auth_user
      - DB_PASSWORD=auth_password
      - DB_NAME=auth_db

  delivery-service:
    build: ./delivery-service
    ports:
      - "8086:8080"
    environment:
      - BASE_FEE=350
      - DISTANCE_RATE=10
      - WEIGHT_RATE=20
      - VOLUME_RATE=30
      - URGENCY_FACTOR=1.2
      - CURRENCY=RUB
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/

  order-service:
    build: ./order-service
    ports:
      - "8082:8080"
    depends_on:
      - order-db
    environment:
      - DB_HOST=order-db
      - DB_USER=order_user
      - DB_PASSWORD=order_password
      - DB_NAME=order_db
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
      - TRACKING_URL=http://tracking-service:8080

  tracking-service:
    build: ./tracking-service
    ports:
      - "8083:8080"
    depends_on:
      - tracking-db
    environment:
      - DB_HOST=tracking-db
      - DB_USER=tracking_user
      - DB_PASSWORD=tracking_password
      - DB_NAME=tracking_db

  analytics-service:
    build: ./analytics-service
    ports:
      - "8084:8080"
    depends_on:
      - analytics-db
    environment:
      - DB_HOST=analytics-db
      - DB_USER=analytics_user
      - DB_PASSWORD=analytics_password
      - DB_NAME=analytics_db
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/

  notification-service:
    build: ./notification-service
    ports:
      - "8085:8080"
    depends_on:
      - notification-db
    environment:
      - DB_HOST=notification-db
      - DB_USER=notification_user
      - DB_PASSWORD=notification_password
      - DB_NAME=notification_db
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
  frontend:
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    command: ["npm", "start"]
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_AUTH_URL=http://localhost:8081
      - REACT_APP_ORDERS_URL=http://localhost:8082
      - REACT_APP_TRACKING_URL=http://localhost:8083
      - REACT_APP_ANALYTICS_URL=http://localhost:8084
    depends_on:
      - auth-service
      - order-service
      - tracking-service
      - analytics-service

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    restart: always

volumes:
  auth_db_data:
  order_db_data:
  tracking_db_data:
  analytics_db_data:
  notification_db_data:
  delivery_db_data:
