package main

import (
	"encoding/json"
	"log"
	"math"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/streadway/amqp"
)

// DeliveryRequest —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.
type DeliveryRequest struct {
	FromLat  float64 `json:"from_lat"`  // –®–∏—Ä–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	FromLng  float64 `json:"from_lng"`  // –î–æ–ª–≥–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	ToLat    float64 `json:"to_lat"`    // –®–∏—Ä–æ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
	ToLng    float64 `json:"to_lng"`    // –î–æ–ª–≥–æ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
	Weight   float64 `json:"weight"`    // –í–µ—Å –ø–æ—Å—ã–ª–∫–∏ (–∫–≥)
	Length   float64 `json:"length"`    // –î–ª–∏–Ω–∞ –ø–æ—Å—ã–ª–∫–∏ (–º–µ—Ç—Ä—ã)
	Width    float64 `json:"width"`     // –®–∏—Ä–∏–Ω–∞ –ø–æ—Å—ã–ª–∫–∏ (–º–µ—Ç—Ä—ã)
	Height   float64 `json:"height"`    // –í—ã—Å–æ—Ç–∞ –ø–æ—Å—ã–ª–∫–∏ (–º–µ—Ç—Ä—ã)
	Urgency  int     `json:"urgency"`   // 1 ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç, 2 ‚Äî —ç–∫—Å–ø—Ä–µ—Å—Å
	OrderID   string  `json:"order_id"`   // üÜï ID –∑–∞–∫–∞–∑–∞
	CourierID string  `json:"courier_id"` // üÜï ID –∫—É—Ä—å–µ—Ä–∞
}

// DeliveryResponse —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.
type DeliveryResponse struct {
	EstimatedCost float64 `json:"estimated_cost"`
	Currency      string  `json:"currency"`
}

var (
	baseFee       float64
	distanceRate  float64
	weightRate    float64
	volumeRate    float64
	urgencyFactor float64
	currency      string
)

// getEnv –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ defaultVal, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞.
func getEnv(key, defaultVal string) string {
	val := os.Getenv(key)
	if val == "" {
		return defaultVal
	}
	return val
}

// initConfig –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
func initConfig() {
	var err error
	baseFee, err = strconv.ParseFloat(getEnv("BASE_FEE", "50"), 64)
	if err != nil {
		baseFee = 50
	}
	distanceRate, err = strconv.ParseFloat(getEnv("DISTANCE_RATE", "5"), 64)
	if err != nil {
		distanceRate = 5
	}
	weightRate, err = strconv.ParseFloat(getEnv("WEIGHT_RATE", "2"), 64)
	if err != nil {
		weightRate = 2
	}
	volumeRate, err = strconv.ParseFloat(getEnv("VOLUME_RATE", "3"), 64)
	if err != nil {
		volumeRate = 3
	}
	urgencyFactor, err = strconv.ParseFloat(getEnv("URGENCY_FACTOR", "1.5"), 64)
	if err != nil {
		urgencyFactor = 1.5
	}
	currency = getEnv("CURRENCY", "USD")
}

// haversineDistance –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.
func haversineDistance(lat1, lon1, lat2, lon2 float64) float64 {
	const R = 6371 // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
	dLat := (lat2 - lat1) * math.Pi / 180
	dLon := (lon2 - lon1) * math.Pi / 180
	lat1Rad := lat1 * math.Pi / 180
	lat2Rad := lat2 * math.Pi / 180

	a := math.Sin(dLat/2)*math.Sin(dLat/2) +
		math.Sin(dLon/2)*math.Sin(dLon/2)*math.Cos(lat1Rad)*math.Cos(lat2Rad)
	c := 2 * math.Atan2(math.Sqrt(a), math.Sqrt(1-a))
	return R * c
}

// calculateVolume –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—ä—ë–º –ø–æ—Å—ã–ª–∫–∏.
func calculateVolume(length, width, height float64) float64 {
	return length * width * height
}

// calculateDeliveryCost –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ.
func calculateDeliveryCost(req DeliveryRequest) float64 {
	distance := haversineDistance(req.FromLat, req.FromLng, req.ToLat, req.ToLng)
	volume := calculateVolume(req.Length, req.Width, req.Height)

	// –§–æ—Ä–º—É–ª–∞: —Å—Ç–æ–∏–º–æ—Å—Ç—å = baseFee + (distance * distanceRate) + (weight * weightRate) + (volume * volumeRate)
	// –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—Ä–æ—á–Ω—ã–π (urgency > 1), —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ urgencyFactor.
	cost := baseFee + (distance * distanceRate) + (req.Weight * weightRate) + (volume * volumeRate)
	if req.Urgency > 1 {
		cost *= urgencyFactor
	}
	return cost
}

func publishDeliveryCalculatedEvent(orderID, courierID string, cost float64) error {
	rabbitURL := os.Getenv("RABBITMQ_URL")
	conn, err := amqp.Dial(rabbitURL)
	if err != nil {
		return err
	}
	defer conn.Close()

	ch, err := conn.Channel()
	if err != nil {
		return err
	}
	defer ch.Close()

	_, err = ch.QueueDeclare("delivery_calculated", true, false, false, false, nil)
	if err != nil {
		return err
	}

	event := map[string]interface{}{
		"event":      "delivery_calculated",
		"order_id":   orderID,
		"courier_id": courierID,
		"cost":       cost,
	}
	body, _ := json.Marshal(event)

	return ch.Publish("", "delivery_calculated", false, false, amqp.Publishing{
		ContentType: "application/json",
		Body:        body,
	})
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	initConfig()

	// –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä Gin
	r := gin.Default()

	r.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"status": "ok", "time": time.Now().Format(time.RFC3339)})
	})

	// POST /calculate ‚Äî —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.
	r.POST("/calculate", func(c *gin.Context) {
		var req DeliveryRequest
		if err := c.BindJSON(&req); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
			return
		}
		cost := calculateDeliveryCost(req)
		resp := DeliveryResponse{
			EstimatedCost: cost,
			Currency:      currency,
		}
		c.JSON(http.StatusOK, resp)
		if req.OrderID != "" {
			if err := publishDeliveryCalculatedEvent(req.OrderID, req.CourierID, cost); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ delivery_calculated: %v", err)
			}
		}
	})

	r.Run(":8080")
}
